import express from 'express';
import nodemailer from 'nodemailer';
import { GoogleGenerativeAI } from '@google/generative-ai';
import dotenv from 'dotenv';
import cors from 'cors';
import { initializeApp } from 'firebase/app';
import { getFirestore, collection, query, getDocs, getDoc, doc } from 'firebase/firestore';

dotenv.config();

const app = express();
const port = process.env.PORT || 3001;

app.use(cors());
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// Configuration Firebase
const firebaseConfig = {
  apiKey: "AIzaSyDJrnZfQAAvSXsOu83Fd9ugq-Wb81YhAnc",
  authDomain: "projet-react-39b1f.firebaseapp.com",
  projectId: "projet-react-39b1f",
  storageBucket: "projet-react-39b1f.firebasestorage.app",
  messagingSenderId: "261519078244",
  appId: "1:261519078244:web:8c3e3459c9bca55ba5c071",
  measurementId: "G-W9EDT6RLZ7"
};
const firebaseApp = initializeApp(firebaseConfig);
const db = getFirestore(firebaseApp);

// Configure Nodemailer transporter
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.GMAIL_EMAIL,
    pass: process.env.GMAIL_PASSWORD,
  },
});

// Initialize Gemini AI
const genAI = new GoogleGenerativeAI(process.env.GEMINI_APIKEY);

// Generate email content
async function generateEmailContent(member, detailedMealPlan) {
  const daysOfWeek = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche'];
  const mealTypes = ['Petit-d√©jeuner', 'D√©jeuner', 'D√Æner'];

  console.log(`[generateEmailContent] G√©n√©ration pour ${member.fullName}`);

  let mealPlanSummaryForGemini = '';
  daysOfWeek.forEach(day => {
    mealPlanSummaryForGemini += `${day}:\n`;
    mealTypes.forEach(mealType => {
      const dishName = detailedMealPlan[day]?.[mealType]?.name || 'Non planifi√©';
      mealPlanSummaryForGemini += `    - ${mealType}: ${dishName}\n`;
    });
  });
  let tone = 'professionnel';
  let greeting = `Bonjour ${member.fullName},`;
  let emojis = '';
  if (member.age < 12) {
    tone = 'ludique';
    greeting = `Salut ${member.fullName} ! üòä`;
    emojis = 'üåüüçΩÔ∏è';
  } else if (member.age >= 12 && member.age < 18) {
    tone = 'd√©contract√©';
    greeting = `Hey ${member.fullName} ! üëã`;
    emojis = 'üòéüëç';
  }

  const prompt = `
    G√©n√©rez un message d'email pour un plan de repas hebdomadaire destin√© √† ${member.fullName}, une personne de ${member.age} ans (${member.gender}).
    Adaptez le ton :
    - Enfant (< 12 ans) : ludique, simple, avec des emojis.
    - Adolescent (12-17 ans) : d√©contract√©, motivant.
    - Adulte (‚â• 18 ans) : professionnel, informatif.
    Le message doit inclure :
    - Une salutation personnalis√©e.
    - Une introduction expliquant le plan de repas.
    - Une conclusion encourageante.
    - Utilisez des emojis pour les enfants et adolescents.
    Le plan de repas d√©taill√© sera ins√©r√© dans un tableau HTML apr√®s votre message.
    Voici un aper√ßu pour adapter le ton :
    ${mealPlanSummaryForGemini}

    Retournez uniquement le corps HTML (sans \`\`\`html\`\`\`, sans l'objet, sans le tableau).
  `;

  try {
    const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
    const result = await model.generateContent(prompt);
    let message = result.response.text().replace(/\n/g, '<br/>');

    const mealPlanTable = `
      <table style="width:100%; border-collapse: collapse; margin: 20px 0; font-family: Arial, sans-serif;">
        <thead>
          <tr style="background-color: #4CAF50; color: white;">
            <th style="border: 1px solid #ddd; padding: 12px; text-align: left;">Jour</th>
            <th style="border: 1px solid #ddd; padding: 12px; text-align: left;">Petit-d√©jeuner</th>
            <th style="border: 1px solid #ddd; padding: 12px; text-align: left;">D√©jeuner</th>
            <th style="border: 1px solid #ddd; padding: 12px; text-align: left;">D√Æner</th>
          </tr>
        </thead>
        <tbody>
          ${daysOfWeek.map(day => {
      const rowColor = (day === 'Samedi' || day === 'Dimanche') ? '#f0f8ff' : '#ffffff';
      const breakfast = detailedMealPlan[day]?.['Petit-d√©jeuner']?.name || 'Non planifi√©';
      const lunch = detailedMealPlan[day]?.['D√©jeuner']?.name || 'Non planifi√©';
      const dinner = detailedMealPlan[day]?.['D√Æner']?.name || 'Non planifi√©';
      return `
              <tr style="background-color:${rowColor};">
                <td style="border: 1px solid #ddd; padding: 12px;">${day}</td>
                <td style="border: 1px solid #ddd; padding: 12px;">${breakfast}</td>
                <td style="border: 1px solid #ddd; padding: 12px;">${lunch}</td>
                <td style="border: 1px solid #ddd; padding: 12px;">${dinner}</td>
              </tr>
            `;
    }).join('')}
        </tbody>
      </table>
    `;
    return `
      <div style="font-family: Arial, sans-serif; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;">
        <h2 style="color: #4CAF50;">${greeting}</h2>
        ${message}
        <p style="font-size: 16px; font-weight: bold;">Votre plan de repas pour la semaine ${emojis} :</p>
        ${mealPlanTable}
        <p style="margin-top: 20px;">${tone === 'ludique' ?
        'Amuse-toi bien √† table !' : tone === 'd√©contract√©' ? 'R√©gale-toi cette semaine !'
          : 'Bon app√©tit et bonne semaine !'}</p>
        <p style="color: #777;">Cordialement,<br>L'√âquipe MealBloom</p>
      </div>
    `;
  } catch (error) {
    console.error(`Erreur Gemini pour ${member.email}:`, error.stack);
    return `
      <div style="font-family: Arial, sans-serif; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;">
        <h2 style="color: #4CAF50;">Bonjour ${member.fullName},</h2>
        <p>Voici votre plan de repas pour la semaine. Nous avons rencontr√© un souci technique, mais voici le planning !</p>
        <p style="font-size: 16px; font-weight: bold;">Votre plan de repas pour la semaine :</p>
        <table style="width:100%; border-collapse: collapse; margin: 20px 0; font-family: Arial, sans-serif;">
          <thead>
            <tr style="background-color: #4CAF50; color: white;">
              <th style="border: 1px solid #ddd; padding: 12px; text-align: left;">Jour</th>
              <th style="border: 1px solid #ddd; padding: 12px; text-align: left;">Petit-d√©jeuner</th>
              <th style="border: 1px solid #ddd; padding: 12px; text-align: left;">D√©jeuner</th>
              <th style="border: 1px solid #ddd; padding: 12px; text-align: left;">D√Æner</th>
            </tr>
          </thead>
          <tbody>
            ${daysOfWeek.map(day => {
      const breakfast = detailedMealPlan[day]?.['Petit-d√©jeuner']?.name || 'Non planifi√©';
      const lunch = detailedMealPlan[day]?.['D√©jeuner']?.name || 'Non planifi√©';
      const dinner = detailedMealPlan[day]?.['D√Æner']?.name || 'Non planifi√©';
      return `
                <tr>
                  <td style="border: 1px solid #ddd; padding: 12px;">${day}</td>
                  <td style="border: 1px solid #ddd; padding: 12px;">${breakfast}</td>
                  <td style="border: 1px solid #ddd; padding: 12px;">${lunch}</td>
                  <td style="border: 1px solid #ddd; padding: 12px;">${dinner}</td>
                </tr>
              `;
    }).join('')}
          </tbody>
        </table>
        <p>Bon app√©tit et bonne semaine !</p>
        <p style="color: #777;">Cordialement,<br>L'√âquipe MealBloom</p>
      </div>
    `;
  }
}

// Generate WhatsApp message
async function generateWhatsAppMessage(content) {
  const { member, detailedMealPlan } = content;
  const daysOfWeek = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche'];
  const mealTypes = ['Petit-d√©jeuner', 'D√©jeuner', 'D√Æner'];

  let mealPlanSummaryForGemini = '';
  daysOfWeek.forEach(day => {
    mealPlanSummaryForGemini += `${day}:\n`;
    mealTypes.forEach(mealType => {
      const dishName = detailedMealPlan?.[day]?.[mealType]?.name || 'Non planifi√©';
      mealPlanSummaryForGemini += `  - ${mealType}: ${dishName}\n`;
    });
  });

  if (!member) {
    // Message pour le groupe
    console.log('[generateWhatsAppMessage] G√©n√©ration pour un groupe');

    const prompt = `
      G√©n√©rez un message WhatsApp pour un plan de repas hebdomadaire destin√© √† un groupe familial.
      Le ton doit √™tre :
      - Amical, inclusif et engageant, adapt√© √† une audience mixte (adultes et enfants).
      - Utilisez des emojis pour rendre le message chaleureux et visuel (par exemple üçΩÔ∏è, üòä, üìÖ).
      Le message doit inclure :
      - Une salutation g√©n√©rique (e.g., "Bonjour la famille !").
      - Une introduction expliquant que c'est le planning des repas de la semaine.
      - Le plan de repas structur√© par jour et type de repas (petit-d√©jeuner, d√©jeuner, d√Æner).
      - Une conclusion encourageante invitant √† profiter des repas ensemble.
      Voici le plan de repas pour r√©f√©rence :
      ${mealPlanSummaryForGemini}

      Retournez uniquement le texte du message (pas de HTML, sans \`\`\`).
    `;

    try {
      const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
      const result = await model.generateContent(prompt);
      let message = result.response.text().trim();

      // Append meal plan in a clean text format
      message += `\n\nüìÖ *Planning des repas de la semaine* üòä\n`;
      daysOfWeek.forEach(day => {
        message += `\n*${day}*:\n`;
        mealTypes.forEach(mealType => {
          const dishName = detailedMealPlan[day]?.[mealType]?.name || 'Non planifi√©';
          message += `  - ${mealType}: ${dishName}\n`;
        });
      });
      message += `\nBon app√©tit √† tous et bonne semaine en famille ! üçΩÔ∏è‚ú®`;
      return message;
    } catch (error) {
      console.error('Erreur Gemini pour le message de groupe:', error.stack);
      let fallbackMessage = `Bonjour la famille ! üòä\n\nVoici le planning des repas de la semaine :\n`;
      daysOfWeek.forEach(day => {
        fallbackMessage += `\n${day}:\n`;
        mealTypes.forEach(mealType => {
          const dishName = detailedMealPlan[day]?.[mealType]?.name || 'Non planifi√©';
          fallbackMessage += `  - ${mealType}: ${dishName}\n`;
        });
      });
      fallbackMessage += `\nBon app√©tit √† tous !`;
      return fallbackMessage;
    }
  } else {
    // Message personnalis√© pour un membre
    console.log(`[generateWhatsAppMessage] G√©n√©ration pour ${member.fullName || member.email}`);

    let tone = 'professionnel';
    let greeting = `Bonjour ${member.fullName || 'Utilisateur'},`;
    let emojis = 'üòã';
    if (member.age < 12) {
      tone = 'ludique';
      greeting = `Salut ${member.fullName || 'Utilisateur'} üòä`;
      emojis = 'üåüüçΩÔ∏è';
    } else if (member.age >= 12 && member.age < 18) {
      tone = 'd√©contract√©';
      greeting = `Hey ${member.fullName || 'Utilisateur'} üëã`;
      emojis = 'üòéüëç';
    }

    const prompt = `
      G√©n√©rez un message WhatsApp pour un plan de repas hebdomadaire destin√© √† ${member.fullName || 'un utilisateur'}, une personne de ${member.age || '√¢ge inconnu'} ans (${member.gender || 'genre inconnu'}).
      Adaptez le ton :
      - Enfant (< 12 ans) : ludique, simple, avec beaucoup d'emojis amusants et mignons.
      - Adolescent (12-17 ans) : d√©contract√©, motivant, avec quelques emojis.
      - Adulte (‚â• 18 ans) : professionnel, informatif, sans emojis inutiles.
      Le message doit inclure :
      - Une salutation personnalis√©e adress√©e √† la personne.
      - Une introduction explicite le plan de la nourriture.
      - Le plan de repas structur√© par jour (jours et repas).
      - Une conclusion encourageante.
      - Utilisez des emojis pour les enfants et adolescents, adapt√©s au ton.
      Voici le plan de repas pour r√©f√©rence :
      ${mealPlanSummaryForGemini}

      Retournez uniquement le texte du message (pas de HTML, pas de \`\`\`).
    `;

    try {
      const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
      const result = await model.generateContent(prompt);
      let message = result.response.text().trim();

      // Append meal plan in a clean text format
      message += `\n\nüìÖ *Plan de repas de la semaine* ${emojis}\n`;
      daysOfWeek.forEach(day => {
        message += `\n*${day}*:\n`;
        mealTypes.forEach(mealType => {
          const dishName = detailedMealPlan[day]?.[mealType]?.name || 'Non planifi√©';
          message += `  - ${mealType}: ${dishName}\n`;
        });
      });
      message += `\n${tone === 'ludique' ? 'R√©gale-toi, petit chef ! ü•ê‚ú®' : tone === 'd√©contract√©' ?
        'Bon app√©tit, √©clate-toi ! üòã' : 'Bon app√©tit et bonne semaine !'}`;
      return message;
    } catch (error) {
      console.error(`Erreur Gemini pour ${member.fullName || 'utilisateur'}:`, error.stack);
      let fallbackMessage = `${greeting}\n\nVoici ton plan de repas pour la semaine :\n`;
      daysOfWeek.forEach(day => {
        fallbackMessage += `\n${day}:\n`;
        mealTypes.forEach(mealType => {
          const dishName = detailedMealPlan[day]?.[mealType]?.name || 'Non planifi√©';
          fallbackMessage += `  - ${mealType}: ${dishName}\n`;
        });
      });
      fallbackMessage += `\nBon app√©tit et bonne semaine !`;
      return fallbackMessage;
    }
  }
}

// Send meal plan emails
app.post('/send-meal-plan-emails', async (req, res) => {
  console.log('Requ√™te /send-meal-plan-emails re√ßue');
  const { userId, members, mealPlan } = req.body;

  if (!userId || !Array.isArray(members) || !mealPlan || typeof mealPlan !== 'object') {
    console.error('Donn√©es invalides:', { userId, members, mealPlan });
    return res.status(400).json({ error: 'Donn√©es manquantes ou invalides.' });
  }

  try {
    const validMembers = members.filter(member =>
      member.email &&
      typeof member.email === 'string' &&
      member.fullName &&
      typeof member.age === 'number' &&
      member.age >= 5 &&
      member.gender
    );

    if (validMembers.length === 0) {
      console.warn('Aucun membre valide pour l\'envoi d\'emails.');
      return res.status(400).json({ error: 'Aucun membre valide avec email et √¢ge ‚â• 5 ans.' });
    }

    for (const member of validMembers) {
      console.log(`G√©n√©ration de contenu pour ${member.email}`);
      const emailContent = await generateEmailContent(member, mealPlan);
      const mailOptions = {
        from: process.env.GMAIL_EMAIL,
        to: member.email,
        subject: `Votre Plan de Repas Hebdomadaire, ${member.fullName} !`,
        html: emailContent,
      };
      console.log(`Envoi d'email √† ${member.email}`);
      await transporter.sendMail(mailOptions);
      console.log(`Email envoy√© √† ${member.email}`);
    }

    return res.status(200).json({ message: 'Emails envoy√©s avec succ√®s.' });
  } catch (error) {
    console.error('Erreur lors de l\'envoi des emails:', error.stack);
    return res.status(500).json({ error: 'Erreur lors de l\'envoi des emails.' });
  }
});

// Generate WhatsApp message endpoint
app.post('/generate-whatsapp-message', async (req, res) => {
  console.log('Requ√™te /generate-whatsapp-message re√ßue');
  const { userId, member, mealPlan } = req.body;

  if (!userId || !mealPlan || typeof mealPlan !== 'object') {
    console.error('Donn√©es invalides:', { userId, member, mealPlan });
    return res.status(400).json({ error: 'Donn√©es manquantes ou invalides.' });
  }

  try {
    const message = await generateWhatsAppMessage({ member, detailedMealPlan: mealPlan });
    return res.status(200).json({ message });
  } catch (error) {
    console.error('Erreur lors de la g√©n√©ration du message WhatsApp:', error.stack);
    return res.status(500).json({ error: 'Erreur lors de la g√©n√©ration du message.' });
  }
});

// Chatbot endpoint
app.post('/chatbot', async (req, res) => {
  console.log('Requ√™te /chatbot re√ßue');
  const { userId, appId, prompt, conversationHistory } = req.body;

  if (!userId || !appId || !prompt) {
    console.error('Donn√©es invalides:', { userId, appId, prompt });
    return res.status(400).json({ error: 'Donn√©es manquantes ou invalides.' });
  }

  try {
    const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
    let dataSummary = '';
    let responseFormat = 'text';
    let imageUrl = null;
    let specificDataRequested = false; // Indicateur si des donn√©es sp√©cifiques ont √©t√© demand√©es

    // Convertir le prompt en minuscules pour une comparaison insensible √† la casse
    const lowerPrompt = prompt.toLowerCase();

    // Fonction utilitaire pour r√©cup√©rer des donn√©es d'une collection
    const fetchData = async (collectionName) => {
      const q = query(collection(db, `artifacts/${appId}/users/${userId}/${collectionName}`));
      const snapshot = await getDocs(q);
      return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
    };

    // --- R√©cup√©ration globale des donn√©es pour un contexte riche ---
    const stockItems = await fetchData('stock');
    const shoppingItems = await fetchData('shoppingList');
    const profiles = await fetchData('profiles');
    const recipes = await fetchData('recipes');
    const mealPlans = await fetchData('mealPlans');

    // --- Pr√©paration des donn√©es pour Gemini ---
    const formattedData = {
      stock: stockItems,
      shoppingList: shoppingItems,
      profiles: profiles,
      recipes: recipes,
      mealPlans: mealPlans,
    };

    // Construction du summary pour Gemini
    dataSummary += `
    Informations disponibles pour l'utilisateur (√† utiliser pour r√©pondre √† la question) :
    
    --- D√©tails du Stock (${stockItems.length} √©l√©ments) ---
    ${stockItems.length === 0 ? 'Aucun √©l√©ment en stock.' : stockItems.map(item => `- ${item.name}: ${item.quantity} ${item.unit}` + (item.expirationDate ? ` (expire le ${new Date(item.expirationDate).toLocaleDateString('fr-FR')})` : '')).join('\n')}
    
    --- Liste de courses (${shoppingItems.length} √©l√©ments) ---
    ${shoppingItems.length === 0 ? 'Aucun √©l√©ment dans la liste de courses.' : shoppingItems.map(item => `- ${item.name}: ${item.quantity} ${item.unit}`).join('\n')}
    
    --- Membres de la famille (${profiles.length} profils) ---
    ${profiles.length === 0 ? 'Aucun membre de la famille enregistr√©.' : profiles.map(profile => {
      const medicalHistory = profile.medicalHistory?.length ? profile.medicalHistory.join(', ') : 'Aucun ant√©c√©dent m√©dical connu.';
      const otherMedicalHistory = profile.otherMedicalHistory ? `, autres: ${profile.otherMedicalHistory}` : '';
      return `- Nom: ${profile.fullName}, √Çge: ${profile.age} ans, Sexe: ${profile.gender}, R√¥le: ${profile.role.join(', ')}, Ant√©c√©dents m√©dicaux/restrictions: ${medicalHistory}${otherMedicalHistory}`;
    }).join('\n')}
    
    --- Plats / Recettes priv√©es (${recipes.length} recettes) ---
    ${recipes.length === 0 ? 'Aucune recette priv√©e enregistr√©e.' : recipes.map(recipe => {
      const ingredients = recipe.ingredients.map(ing => `${ing.name} (${ing.quantity} ${ing.unit})`).join(', ');
      const steps = recipe.steps?.length ? recipe.steps.map((step, index) => `${index + 1}. ${step}`).join('\n') : 'Pas d\'√©tapes d√©taill√©es.';
      return `
      - Nom du plat: ${recipe.name}
        Description: ${recipe.description || 'N/A'}
        Ingr√©dients: ${ingredients}
        Temps de pr√©paration: ${recipe.preparationTime || 'N/A'}
        Temps de cuisson: ${recipe.cookingTime || 'N/A'}
        Portions: ${recipe.servings || 'N/A'}
        Cat√©gorie: ${recipe.category || 'N/A'}
        √âtapes: ${steps}
        ${recipe.image ? `Image URL: ${recipe.image}` : ''}
      `;
    }).join('\n')}
    
    --- Planning des repas (${mealPlans.length} jours planifi√©s) ---
    ${mealPlans.length === 0 ? 'Aucun plat configur√© dans le planning.' : mealPlans.map(plan => {
      const date = new Date(plan.id); // Assuming id is a date string
      const breakfast = plan.breakfast?.name || 'Non planifi√©';
      const lunch = plan.lunch?.name || 'Non planifi√©';
      const dinner = plan.dinner?.name || 'Non planifi√©';
      return `- Date: ${date.toLocaleDateString('fr-FR')}, Petit-d√©jeuner: ${breakfast}, D√©jeuner: ${lunch}, D√Æner: ${dinner}`;
    }).join('\n')}
    `;

    // --- D√©tection des intentions et ajustement du prompt ---
    let intentPromptModifier = '';
    let relevantProfiles = [];
    let relevantRecipes = [];
    let medicalRestrictions = [];
    let namesMentioned = [];

    // Tente de trouver les noms des membres de la famille dans le prompt
    profiles.forEach(profile => {
      if (lowerPrompt.includes(profile.fullName.toLowerCase()) || (profile.otherNames && lowerPrompt.includes(profile.otherNames.toLowerCase()))) {
        namesMentioned.push(profile.fullName);
        relevantProfiles.push(profile);
      }
    });

    if (namesMentioned.length > 0) {
      specificDataRequested = true;
      intentPromptModifier += `L'utilisateur s'int√©resse aux informations concernant : ${namesMentioned.join(', ')}.`;
      // Collecter les ant√©c√©dents m√©dicaux de tous les membres mentionn√©s
      relevantProfiles.forEach(profile => {
        if (profile.medicalHistory && profile.medicalHistory.length > 0) {
          medicalRestrictions = medicalRestrictions.concat(profile.medicalHistory);
        }
        if (profile.otherMedicalHistory) {
          medicalRestrictions.push(profile.otherMedicalHistory);
        }
      });
      medicalRestrictions = [...new Set(medicalRestrictions)]; // Supprimer les doublons
      if (medicalRestrictions.length > 0) {
        intentPromptModifier += ` Leurs ant√©c√©dents m√©dicaux/restrictions comprennent : ${medicalRestrictions.join(', ')}.`;
      }
    }

    if (lowerPrompt.includes('stock')) {
      specificDataRequested = true;
      intentPromptModifier += ` L'utilisateur demande des informations sur le stock.`;
    }

    if (lowerPrompt.includes('liste de courses') || lowerPrompt.includes('shopping list')) {
      specificDataRequested = true;
      intentPromptModifier += ` L'utilisateur demande des informations sur la liste de courses.`;
    }

    if (lowerPrompt.includes('ant√©c√©dents m√©dicaux') || lowerPrompt.includes('sant√©') || lowerPrompt.includes('restrictions')) {
      specificDataRequested = true;
      if (relevantProfiles.length === 0) { // Si pas de noms mentionn√©s mais demande d'ant√©c√©dents
        intentPromptModifier += ` L'utilisateur demande des informations sur les ant√©c√©dents m√©dicaux des membres de la famille.`;
        profiles.forEach(profile => {
          if (profile.medicalHistory && profile.medicalHistory.length > 0) {
            medicalRestrictions = medicalRestrictions.concat(profile.medicalHistory);
          }
          if (profile.otherMedicalHistory) {
            medicalRestrictions.push(profile.otherMedicalHistory);
          }
        });
        medicalRestrictions = [...new Set(medicalRestrictions)];
      }
    }

    if (lowerPrompt.includes('plats') || lowerPrompt.includes('recettes') || lowerPrompt.includes('repas')) {
      specificDataRequested = true;
      intentPromptModifier += ` L'utilisateur demande des informations sur les plats/recettes.`;

      if (lowerPrompt.includes('conseillerais tu') || lowerPrompt.includes('sugg√©rerais tu')) {
        intentPromptModifier += ` L'utilisateur cherche des recommandations de plats.`;

        // Filtrer les recettes en fonction des ant√©c√©dents m√©dicaux d√©tect√©s
        relevantRecipes = recipes.filter(recipe => {
          // Si aucune restriction n'est pr√©sente, toutes les recettes sont compatibles
          if (medicalRestrictions.length === 0) return true;

          // V√©rifier si la recette est compatible avec toutes les restrictions
          return !medicalRestrictions.some(restriction => {
            const lowerRestriction = restriction.toLowerCase();
            const lowerRecipeName = recipe.name.toLowerCase();
            const lowerRecipeIngredients = recipe.ingredients.map(ing => ing.name.toLowerCase()).join(' ');

            // Logique de compatibilit√© (√† √©tendre selon vos besoins)
            if (lowerRestriction.includes('v√©g√©tarien') && (lowerRecipeName.includes('viande') || lowerRecipeName.includes('poulet') || lowerRecipeName.includes('b≈ìuf') || lowerRecipeName.includes('porc') || lowerRecipeName.includes('poisson') || lowerRecipeIngredients.includes('viande') || lowerRecipeIngredients.includes('poulet') || lowerRecipeIngredients.includes('b≈ìuf') || lowerRecipeIngredients.includes('porc') || lowerRecipeIngredients.includes('poisson'))) {
              return true; // La recette est incompatible
            }
            if (lowerRestriction.includes('diab√®te') && (lowerRecipeName.includes('sucre') || lowerRecipeIngredients.includes('sucre') || lowerRecipeIngredients.includes('miel') || lowerRecipeIngredients.includes('sirop'))) {
              return true; // La recette est incompatible
            }
            return false;
          });
        });

        // Si des recettes sp√©cifiques sont demand√©es (par exemple, "montre-moi une recette")
        if (lowerPrompt.includes('d√©tails') || lowerPrompt.includes('montre-moi une recette') || lowerPrompt.includes('une recette al√©atoire')) {
          if (relevantRecipes.length > 0) {
            const randomRecipe = relevantRecipes[Math.floor(Math.random() * relevantRecipes.length)];
            dataSummary = `Voici une recette de votre collection priv√©e compatible avec les restrictions :
            Nom du plat: ${randomRecipe.name}
            Description: ${randomRecipe.description || 'N/A'}
            Ingr√©dients: ${randomRecipe.ingredients.map(ing => `${ing.name} (${ing.quantity} ${ing.unit})`).join(', ')}
            Temps de pr√©paration: ${randomRecipe.preparationTime || 'N/A'}
            Temps de cuisson: ${randomRecipe.cookingTime || 'N/A'}
            Portions: ${randomRecipe.servings || 'N/A'}
            Cat√©gorie: ${randomRecipe.category || 'N/A'}
            √âtapes: ${randomRecipe.steps?.length ? randomRecipe.steps.map((step, index) => `${index + 1}. ${step}`).join('\n') : 'Pas d\'√©tapes d√©taill√©es.'}
            `;
            if (randomRecipe.image) {
              imageUrl = randomRecipe.image;
              responseFormat = 'recipe';
            }
          } else {
            dataSummary = `Aucune recette compatible trouv√©e dans votre collection priv√©e avec les restrictions sp√©cifi√©es (${medicalRestrictions.join(', ')}).`;
          }
        } else {
          // Pour les requ√™tes de conseil plus g√©n√©rales
          dataSummary += `\nRecettes compatibles avec les ant√©c√©dents m√©dicaux/restrictions de ${namesMentioned.join(', ')} (${medicalRestrictions.join(', ')}) :
          ${relevantRecipes.length === 0 ? 'Aucune recette compatible trouv√©e.' : relevantRecipes.map(recipe => `- ${recipe.name}`).join('\n')}
          `;
        }
      }
    }

    if (lowerPrompt.includes('planning') || lowerPrompt.includes('plan de repas') || lowerPrompt.includes('menu')) {
      specificDataRequested = true;
      intentPromptModifier += ` L'utilisateur demande des informations sur le planning des repas.`;
    }

    // Si aucune intention sp√©cifique n'a √©t√© d√©tect√©e mais que des noms ont √©t√© mentionn√©s
    if (!specificDataRequested && namesMentioned.length > 0) {
      intentPromptModifier += ` La question semble concerner les membres de la famille mentionn√©s (${namesMentioned.join(', ')}).`;
    }

    // Prompt pour Gemini
    const geminiPrompt = `
      Tu es un assistant culinaire intelligent et serviable pour l'application MealBloom, con√ßu pour aider les utilisateurs √† g√©rer leur planification de repas familiale.
      R√©ponds en fran√ßais avec un ton amical, clair, concis et engageant.
      Utilise des emojis si appropri√© (ex. üòã pour la nourriture, üõí pour les courses, üë®‚Äçüë©‚Äçüëß‚Äçüë¶ pour la famille, üè• pour la sant√©).
      Reformule les donn√©es que je te fournis en une r√©ponse naturelle et conviviale, en te basant sur la question de l'utilisateur.

      Instructions sp√©cifiques bas√©es sur la d√©tection d'intention :
      ${intentPromptModifier}
      Si l'utilisateur demande des conseils de plats ou des recommandations, utilise les "Plats / Recettes priv√©es" et les "Membres de la famille" (en particulier leurs ant√©c√©dents m√©dicaux/restrictions) pour proposer des options adapt√©es. Ne propose que des plats qui ne contiennent pas les ingr√©dients ou ne sont pas incompatibles avec les restrictions indiqu√©es. Si aucune restriction n'est mentionn√©e, tu peux proposer n'importe quel plat. Si aucune recette compatible n'est trouv√©e, indique-le clairement.
      Si une image est disponible (pour une recette), mentionne qu'elle est affich√©e.
      Si la question de l'utilisateur est tr√®s g√©n√©rale ou ne correspond √† aucun mot-cl√© sp√©cifique, utilise toutes les "informations suppl√©mentaires disponibles" que je te fournis pour donner une r√©ponse utile ou proposer de l'aide sur ces sujets.
      N'invente pas d'informations qui ne sont pas dans les donn√©es fournies. Si une information n'est pas disponible ou si tu ne peux pas r√©pondre avec les donn√©es actuelles, indique-le clairement et poliment, et propose d'autres aides.

      Donn√©es compl√®tes disponibles pour l'utilisateur :
      ${dataSummary}

      Question de l'utilisateur : ${prompt}

      Historique de la conversation (pour le contexte) :
      ${(conversationHistory || []).map(msg => `${msg.user ? 'Utilisateur: ' + msg.user : 'Assistant: ' + msg.bot}`).join('\n')}

      R√©ponse :
    `;
    const result = await model.generateContent(geminiPrompt);
    const message = result.response.text();

    return res.status(200).json({ message, format: responseFormat, imageUrl });
  } catch (error) {
    console.error('Erreur lors du traitement du prompt:', error.stack);
    return res.status(500).json({ error: 'Erreur lors du traitement du prompt.' });
  }
});

// Route pour la g√©n√©ration d'√©tapes de pr√©paration
app.post('/generate-recipe-steps', async (req, res) => {
  try {
    const { recipeName, ingredients, description } = req.body;

    const prompt = `
      G√©n√©rez des √©tapes de pr√©paration d√©taill√©es pour la recette suivante :
      Nom : ${recipeName}
      Description : ${description}
      Ingr√©dients :
      ${ingredients.map(ing => `- ${ing.quantity} ${ing.unit} de ${ing.name}`).join('\n')}

      Format de r√©ponse souhait√© :
      1. √âtape 1
      2. √âtape 2
      etc.

      Les √©tapes doivent √™tre :
      - Claires et pr√©cises
      - Dans un ordre logique
      - Inclure les temps de cuisson si n√©cessaire
      - Mentionner les temp√©ratures si n√©cessaire
      - Inclure des conseils utiles pour la r√©ussite de la recette

      Retournez uniquement les √©tapes num√©rot√©es, sans introduction ni conclusion.
    `;

    const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
    const result = await model.generateContent(prompt);
    const steps = result.response.text();

    res.json({ steps });
  } catch (error) {
    console.error('Erreur lors de la g√©n√©ration des √©tapes:', error);
    res.status(500).json({ error: 'Erreur lors de la g√©n√©ration des √©tapes de pr√©paration' });
  }
});

// Test routes
app.get('/', (req, res) => {
  res.send('Backend for MealBloom is running!');
});

app.get('/test-email', async (req, res) => {
  try {
    const mailOptions = {
      from: process.env.GMAIL_EMAIL,
      to: process.env.GMAIL_EMAIL,
      subject: 'Test Email from MealBloom',
      text: 'Ceci est un test depuis Nodemailer.',
    };
    await transporter.sendMail(mailOptions);
    console.log('Email de test envoy√©');
    res.json({ message: 'Email de test envoy√©' });
  } catch (error) {
    console.error('Erreur test email:', error.stack);
    return res.status(500).json({ error: error.message });
  }
});

app.get('/test-gemini', async (req, res) => {
  try {
    const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
    const result = await model.generateContent('Test de l\'API Gemini.');
    console.log('R√©ponse Gemini:', result.response.text());
    res.json({ message: 'Test Gemini r√©ussi', response: result.response.text() });
  } catch (error) {
    console.error('Erreur test Gemini:', error.stack);
    return res.status(500).json({ error: error.message });
  }
});

app.listen(port, () => {
  console.log(`Server listening on port ${port}`);
});